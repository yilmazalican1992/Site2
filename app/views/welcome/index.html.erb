<html>
<body>
<h3>HELLO WORLD! by Ruby on Rails special thanks to hasancc & TanerA </h1>
<h3>this is the first step for building my future goes San Jose, California :P </h1>
<h3>my github yilmazalican1992 </h1>
<img src="https://pine.fm/images/PoweredByRuby.png" />
<img src="https://www.codeship.io/projects/ea8fbcf0-a733-0131-c660-26855b373a72/status"/>
<br>
<script>
  window.fbAsyncInit = function() {
  FB.init({
    appId      : '250469048435081',
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true  // parse XFBML
  });

  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      // The response object is returned with a status field that lets the app know the current
      // login status of the person. In this case, we're handling the situation where they 
      // have logged in to the app.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // In this case, the person is logged into Facebook, but not into the app, so we call
      // FB.login() to prompt them to do so. 
      // In real-life usage, you wouldn't want to immediately prompt someone to login 
      // like this, for two reasons:
      // (1) JavaScript created popup windows are blocked by most browsers unless they 
      // result from direct interaction from people using the app (such as a mouse click)
      // (2) it is a bad experience to be continually prompted to login upon page load.
      FB.login();
    } else {
      // In this case, the person is not logged into Facebook, so we call the login() 
      // function to prompt them to do so. Note that at this stage there is no indication
      // of whether they are logged into the app. If they aren't then they'll see the Login
      // dialog right after they log in to Facebook. 
      // The same caveats as above apply to the FB.login() call here.
      FB.login();
    }
  });
  };

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = id; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);
  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Good to see you, ' + response.name + '.');
	
    });
  }
FB.ui({method: 'apprequests',
  message: 'My Great Request'
}, requestCallback);
</script>

<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked. -->

<!-- Start counter code -->

<a href="http://jackpots-life.net/" target="blank" >
<img alt="Website counter" hspace="0" vspace="0" border="0" src="http://bigbluecounters.com/7431528-25608DF228D5D1BCF501F1F838970E7E/counter.img?theme=1&digits=7&siteId=6"/>
</a>
<noscript><br/><a href="http://jackpots-life.net/">jackpots-life.net</a><br>The following text will not be seen after you upload your website, please keep it in order to retain your counter functionality <br> <a href="http://lotto-pick.com/" target="_blank">lotto pick</a></noscript>

<!-- End counter code -->
</br>

<tr>
<fb:login-button show-faces="true" width="200" max-rows="1"></fb:login-button>
</tr>
</body>
</html>